{"version":3,"sources":["components/Statistics/Statistics.module.css","components/FeedbackOptions/FeedbackOptions.module.css","components/Section/Section.module.css","components/Notification/Notification.module.css","components/Section/Section.js","components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.js","components/Notification/Notification.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Section","title","children","className","s","wrapper","Statistics","totalFeedbacks","positivePercentage","feedbackOptions","good","neutral","bad","spanWrapper","output","total","isNaN","FeedbackOptions","onLeaveFeedback","boxWrapper","btn","type","onClick","prototypes","onAddFeedback","PropTypes","func","Notification","message","App","useState","setGood","setNeutral","setBad","countTotalFeedback","isAnyFeedbacks","Boolean","positiveInPersent","totalFeeds","res","Math","round","countPositiveFeedbackPercentage","state","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.91877bbf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"spanWrapper\":\"Statistics_spanWrapper__1Xj4J\",\"output\":\"Statistics_output__xYRjw\",\"total\":\"Statistics_total__2eSSc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"boxWrapper\":\"FeedbackOptions_boxWrapper__20p8I\",\"btn\":\"FeedbackOptions_btn__1L9r5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Section_wrapper__2aw_d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Notification_message__1LhoM\"};","import PropTypes from \"prop-types\";\nimport s from \"./Section.module.css\";\n\nconst Section = ({ title, children }) => {\n  return (\n    <section className={s.wrapper}>\n      <h2 className=\"title\">{title}</h2>\n      {children}\n    </section>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n\nexport default Section;\n","import PropTypes from \"prop-types\";\nimport s from \"./Statistics.module.css\";\n\nconst Statistics = ({\n  totalFeedbacks,\n  positivePercentage,\n  feedbackOptions,\n}) => {\n  const { good, neutral, bad } = feedbackOptions;\n\n  return (\n    <div className=\"box\">\n      <div className={s.spanWrapper}>\n        <span className={s.output}>good: {good}</span>\n        <span className={s.output}>neutral: {neutral}</span>\n        <span className={s.output}>bad: {bad}</span>\n        <span className={s.total}>total: {totalFeedbacks}</span>\n        <span className={s.total}>\n          positive feedbacks:{\" \"}\n          {isNaN(positivePercentage) ? \"0\" : positivePercentage}%\n        </span>\n      </div>\n    </div>\n  );\n};\n\nStatistics.propTypes = {\n  totalFeedback: PropTypes.func,\n  persentage: PropTypes.number,\n  feedbackOptions: PropTypes.exact({\n    good: PropTypes.number.isRequired,\n    neutral: PropTypes.number.isRequired,\n    bad: PropTypes.number.isRequired,\n  }),\n};\nexport default Statistics;\n","import PropTypes from \"prop-types\";\nimport s from \"./FeedbackOptions.module.css\";\n\nconst FeedbackOptions = ({ onLeaveFeedback }) => {\n  return (\n    <div className={s.boxWrapper}>\n      <button\n        className={s.btn}\n        type=\"button\"\n        onClick={() => onLeaveFeedback(\"good\")}\n      >\n        good\n      </button>\n      <button\n        className={s.btn}\n        type=\"button\"\n        onClick={() => onLeaveFeedback(\"neutral\")}\n      >\n        neutral\n      </button>\n      <button\n        className={s.btn}\n        type=\"button\"\n        onClick={() => onLeaveFeedback(\"bad\")}\n      >\n        bad\n      </button>\n    </div>\n  );\n};\n\nFeedbackOptions.prototypes = {\n  onAddFeedback: PropTypes.func,\n};\n\nexport default FeedbackOptions;\n","import PropTypes from \"prop-types\";\nimport s from \"./Notification.module.css\";\n\nconst Notification = ({ message }) => {\n  return (\n    <div className={s.message}>\n      <p>{message}</p>\n    </div>\n  );\n};\n\nNotification.propTypes = { message: PropTypes.string.isRequired };\n\nexport default Notification;\n","// import React, { Component } from 'react';\nimport { useState } from \"react\";\nimport \"./App.css\";\nimport Section from \"./components/Section\";\nimport Statistics from \"./components/Statistics\";\nimport FeedbackOptions from \"./components/FeedbackOptions\";\nimport Notification from \"./components/Notification\";\n\nconst App = () => {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const addFeedback = (value) => {\n    switch (value) {\n      case \"good\":\n        setGood((state) => state + 1);\n        break;\n      case \"neutral\":\n        setNeutral((state) => state + 1);\n        break;\n      case \"bad\":\n        setBad((state) => state + 1);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const countTotalFeedback = () => {\n    // const stateValues = Object.values(this.state);\n    // return stateValues.reduce((acc, el) => acc + el, 0);\n    return good + neutral + bad;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    const totalFeeds = countTotalFeedback();\n    // const goodFeeds = this.state.good;\n    const res = (good * 100) / totalFeeds;\n    return Math.round(res);\n  };\n\n  // const { state, countTotalFeedback, countPositiveFeedbackPercentage } = this;\n  const isAnyFeedbacks = Boolean(countTotalFeedback());\n  const positiveInPersent = countPositiveFeedbackPercentage();\n  const totalFeedbacks = countTotalFeedback();\n  const state = { good, neutral, bad };\n\n  return (\n    <div className=\"App\">\n      <Section title=\"Please leave a feedback\">\n        <FeedbackOptions onLeaveFeedback={addFeedback} />\n      </Section>\n      <Section title=\"Statistics\">\n        {isAnyFeedbacks && (\n          <Statistics\n            feedbackOptions={state}\n            totalFeedbacks={totalFeedbacks}\n            positivePercentage={positiveInPersent}\n          />\n        )}\n      </Section>\n      {!isAnyFeedbacks && <Notification message=\"No feedback given..\" />}\n    </div>\n  );\n};\n\n// class classedApp extends Component {\n//   state = {\n//     good: 0,\n//     neutral: 0,\n//     bad: 0,\n//   };\n\n//   addFeedback = value => {\n//     this.setState(prevState => ({ [value]: prevState[value] + 1 }));\n//   };\n\n//   countTotalFeedback = () => {\n//     // const stateValues = Object.values(this.state);\n//     // return stateValues.reduce((acc, el) => acc + el, 0);\n//     const { good, neutral, bad } = this.state;\n//     return good + neutral + bad;\n//   };\n\n//   countPositiveFeedbackPercentage = () => {\n//     const totalFeeds = this.countTotalFeedback();\n//     const goodFeeds = this.state.good;\n//     const res = (goodFeeds * 100) / totalFeeds;\n//     return Math.round(res);\n//   };\n\n//   render() {\n//     const { state, countTotalFeedback, countPositiveFeedbackPercentage } = this;\n//     const isAnyFeedbacks = Boolean(this.countTotalFeedback());\n//     const positiveInPersent = countPositiveFeedbackPercentage();\n//     const totalFeedbacks = countTotalFeedback();\n\n//     return (\n//       <div className=\"App\">\n//         <Section title=\"Please leave a feedback\">\n//           <FeedbackOptions onLeaveFeedback={this.addFeedback} />\n//         </Section>\n//         <Section title=\"Statistics\">\n//           {isAnyFeedbacks && (\n//             <Statistics\n//               feedbackOptions={state}\n//               totalFeedbacks={totalFeedbacks}\n//               positivePercentage={positiveInPersent}\n//             />\n//           )}\n//         </Section>\n//         {!isAnyFeedbacks && <Notification message=\"No feedback given..\" />}\n//       </div>\n//     );\n//   }\n// }\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}